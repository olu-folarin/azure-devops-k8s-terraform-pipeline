trigger:
- main

pool:
  vmImage: ubuntu-latest

# several stages, each with its own jobs and steps
# build can also be instantiated directly below a stage, before steps.
# If there are too many variables in your pipeline, your pipeline will take longer to run.
stages:
- stage: Build
  jobs:
  - job: FirstJob
    steps:
    - bash: echo FirstJob Build
    # this will inject the variable into your build
    - bash: echo $(PipeLineLevelVariable)
    - bash: echo $(Build.SourceDirectory)
    - bash: echo $(Build.Reason)
    - bash: echo $(Build.BuildId)
    - bash: python --version
    - bash: node --version
    - bash: mvn -version
    - bash: java -version
    - bash: echo $(Build.ArtifactStagingDirectory)
    - bash: echo $(System.DefaultWorkingDirectory)
    # content before the copy task
    - bash: ls -R $(Build.ArtifactStagingDirectory)
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          **/*.tf
          **/*.yaml
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    # content after copy
    - bash: ls -R $(Build.ArtifactStagingDirectory)
      

  # - job: SecondJob
  #   steps:
  #   - bash: echo SecondJob Build
# - stage: DevDeploy
# # it can also be used at the stage level to reveal the environment u in
#   variables:
#     environment: Dev
#   dependsOn: Build
#   jobs:
#   - job: FirstDeployment
#     steps:
#     - bash: echo $(environment)FirstDeployment
# - stage: QADeploy
#   variables:
#     environment: QA
#   dependsOn: DevDeploy
#   jobs:
#   - job: FirstQA
#     steps:
#     - bash: echo $(environment)FirstQA
# - stage: ProdDeploy
#   variables:
#     environment: Prod
#   dependsOn:
#   - Devdeploy
#   - QADeploy
#   jobs:
#   - job: ProdDeployment
#     steps:
#     - bash: echo $(environment) Production Deployment